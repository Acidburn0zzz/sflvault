BUGS
====

 * Il faut qu'il prenne l'URL du "setup" quand tu call "setup", et non pas
   la config, sinon il plante.
 * Add some verifications to password encryption, pad with random value, start
   and end, and verify they are the same.
 * Use xmlrpclib.DateTime instead of numbers while passing a date through XMLRPC
 * *IMP* Utiliser plutôt un buffer en mémoire pour l'authentification, et non pas
   un champ dans la base de données (login_token, login_expired, etc...)


DESIGN TWISTERS
===============

 * Vulnerable to someone who would like to erase the database, by overwriting
   all the secrets, or setting no 'level' for a secret. Solution: backups.
 * Versioning should be though of - BUT it would add so much complexity, that
   it might be a no-go.
 * We'll ensure we have a good log system, with *frequent database backup*.
 * Add version-protocol negociation (so client can adapt to older protocols,
   and same for the server.), freeze protocol at some point. Add some XML-RPC
   signatures.


TODO
====


 * Remove all references to hostname / username / port in data tables, since
   all this information is stored in the URL, and is fetched automatically
   by the services. No need to duplicate.
 * Show a warning and don't use password when specified (with add-service)
   on the command-line.
 * Make plugins that will display the information in a useful manner for
   each URL schemas, for example, add the decrypted password to an 'http'
   scheme and display it as:
      http://username:password@hostname[:port]/path?query#fragment
   Display [:port] only if different from hard-coded well-known port (inside
   the plugin)
 * Warn when config already exists, and you're going to issue a *setup*
   command, that will override previous config, and destroy the private key!!!
 * Implement XMLRPC via HTTPS (using M2Crypto), on client side.
 * Add support for svlfault ssh -L, -R, and -D, which does
   everything it can (even over multiple-hops) to create the
   desired tunnel (Local, Remote and SOCKS proxy): for example,
   create intermediate -L with random ports to make sure
   everything gets to destination.
 * Add table for sensitive data, that isn't server-related (like
   credit card info, PayPal accounts..)
 * Make sflvault --shell ask for the passphrase and decrypt the private
   key once, and be able to work in with a decrypted (in-ram encrypted)
   private key, so all the operations are made with the same private key.
   Eventually, dropping the key each 3 minutes of inactivity writing to
   the term: [Dropped secrets from memory], asking to authenticate again:
     [sflv]% 
     SFLvault: dropped secrets from memory. Issue 'pass' to log back in.
     [sflv]% pass
     Enter passphrase: 
     Authenticated, timeout in XXX seconds
     [sflv]%
 * Throttle, avec avertissement.. y repenser..
 * Sécurisation HTTPS, vérification des certificats, MAN-IN-THE-MIDDLE
   attack, garder le fingerprint, etc...
 * Add support for adduser --admin, that would enable the new user's admin flag
 * Add support for authtok + IP security (check IP address also) (lib/base.py)
 * S'arranger pour avoir le help avant d'entrer son mot de passe si on fait
   une erreur dans le format d'une commande (sflvault client)
 * Log any changes in admin user privileges.

